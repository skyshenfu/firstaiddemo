apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.app286.firstaid"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode getTagNumber()
        versionName getTagName()
        //设置产品通道要先在这里声明
        flavorDimensions "channelfeature"
        /**
         * 测试相关
         * 1.测试时的Runner
         * 2.测试生成的apk包名
         * 3.是否启用性能分析
         * 4.是否启用功能调试
         */
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testApplicationId  "com.app286.testfirstaid"
        testHandleProfiling true
        testFunctionalTest true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "Integer","TYPENUMBER","4396"
        }
        debug{
            buildConfigField "Integer","TYPENUMBER","9527"
        }
    }
    productFlavors{
        channeldefault{
            dimension "channelfeature"
            manifestPlaceholders.put("CHANNEL","channel1")
            buildConfigField("String","TESTURL","\"httppain\"")
            buildConfigField "String","TESTNAME","\"pain\""
            buildConfigField "Integer","TESTNUMBER","123"
            resValue('string','channelname',"pain渠道")
        }
    }
    //一个配置生成apk的名字的方法
    android.applicationVariants.all { variant->
        variant.outputs.all {
            // 直接改名字，给闭包当中的字段赋值
            outputFileName= "app_" + productFlavors[0].name + "_" + buildType.name  + defaultConfig.versionName + ".apk";
            //output ->output.outputFile=new File(output.outputFile.parent,"Gradle测试_"+productFlavors[0].name+buildType.name+defaultConfig.versionName+".apk")
        }
    }
    //渠道多的时候用这个方法配置。注意一般配置一下同时的东西比如每个渠道名
    productFlavors.all{flavor->
        manifestPlaceholders.put("NAMEEACH",name) }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation "com.android.support:appcompat-v7:$rootProject.supportVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjava"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroid"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:converter-scalars:$rootProject.retrofit"
    implementation "com.github.ybq:Android-SpinKit:1.1.0"
}
//实际上这个方法是用来获取当前分支上最新的一个TAG并且将TAGName转化为buildconfig的veesionname
def getTagName(){
    def stdout=new ByteArrayOutputStream()
    //执行命令行 用，隔开
    exec {
        commandLine 'git','describe','--abbrev=0','--tags'
        //这是在闭包内部传值到外界的一个方法（ps；和java赋值是相反的 ？）
        standardOutput=stdout
    }
    //过滤字符就好，比如空格换行之类的
    return  stdout.toString().trim()
}
//同上，每次打一个tag就会在VersionCode+1
def getTagNumber(){
    def stdout=new ByteArrayOutputStream()
    exec {
        commandLine 'git','tag','--list'
        standardOutput=stdout
    }
    return  stdout.toString().split('\n').size()
}